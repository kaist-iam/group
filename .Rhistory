21134,25542.2,180633,185333,30292.5,458476,18521.9,
6768.3,433185,16082.12,2009.5288,18141.93,188062.1,
109.6817,13043.72,1338.5943,15856.34,178417.9,
123.7027,0,0,1184990,2534180),
`2035` = c(0.00430412,0.00720779,18503,
20.8042,6.5157,7135.87,3849.43,282.481,0,1483.35,
343.038,545.929,746.051,455404,2.0724368,3.7146859,
33.874018,455374.6,3248.89,301.15,145.767,129338,
2924.99,27689,28287.9,9740.48,904832,58747,64497,
141366,143099,23532.2,473591,19006.9,7068.05,447516,
27941.73,3767.7235,26151.559,167784.3,81.39656,
23434.67,2584.3183,23230.255,172429.7,110.7512,160.761,
930.384,2293400,1708560),
`2040` = c(0.0359311,0.13751,19578.1,
59.3107,20.2455,8451.67,3389.48,366.227,0,1122.05,
454.706,695.633,562.887,473263,6.67709374,9.8142096,
45.7412,473217.1,2993.71,775.937,456.011,134110,
3011.2,26453.4,27011.8,8975.41,898796,88643.7,88402.3,
112624,112507,18592.6,478027,19154.8,7217.74,451654,
35846.95,5605.6209,31506.527,148641.9,58.55494,
30909.531,3998.4261,28599.103,166387.6,99.87305,483.097,
3443.96,2710160,1466540),
`2045` = c(0.278111,1.93601,20446.1,
166.327,64.9088,9109.2,3363.75,405.467,0,1062.7,
517.074,760.882,534.745,488244,13.1475027,16.146676,
51.83323,488184.5,2751.31,1873.23,1326.68,135888,
3040.38,25072.3,25609.7,8248.68,885107,101588,92091.3,
100045,98640.1,16364.7,476379,18966.7,7271.34,450141,
38649.507,7223.2147,33431.73,139804.3,53.1615,
34300.933,5404.2053,31161.37,160018.89,93.18273,1442.57,
13150.1,2909650,1413470),
`2050` = c(1.96195,20.2405,21082.9,
377.083,168.948,9493.58,3451.14,432.337,0,1075.12,
566.538,806.741,546.421,500500,23.343953,23.475638,
57.05254,500423.1,2523.36,4124.63,3441.58,133460,3015.6,
23606.1,24144.4,7565.28,863956,108493,89404.4,
91964.1,89549.3,14866.9,469679,18520.6,7257,443901,
37245.57,8611.616,32724.34,134551.43,49.44327,34149.95,
6792.507,31458.37,158228.41,89.50253,3545.59,
41464.2,3031060,1409650),
`2055` = c(3.6447,37.9811,21394.3,
624.45,289.635,9338.96,3538.03,443.747,0,1102.79,
583.648,830.872,563.718,512582,30.91237,28.65034,61.00257,
512494.3,2310.8,7146.7,6030.58,126402,2962.31,
22144.6,22666.2,6927.98,833782,102760,84718,87289.3,
85048,14070,459897,18139,7144.84,434613,34503.5,
9407.739,31809.93,129537.17,46.07639,32830.09,7754.181,
31642.62,156994.9,86.44108,6038.38,72552.9,3043250,
1461730),
`2060` = c(6.23019,65.628,21436.6,
805.351,387.872,9189.61,3607.32,452.666,0,1124.08,
597.76,848.431,576.311,521203,35.29972,31.38661,63.33213,
521114.5,2123.52,11141.2,9515.05,115458,2859.54,
20759.8,21255.6,6366.51,800565,97113.1,80100.5,
82597.4,80509.4,13288.5,446956,17643,6972.68,422340,
31979.87,9800.887,30829.66,123788.46,42.85289,31481.56,
8362.198,31657.3,154314.5,83.09827,7931.3,98142.2,
3043200,1502840),
`2065` = c(9.50866,99.9575,21310.4,
901.98,436.974,9130.49,3696.24,459.561,0,1140.37,
607.416,860.808,585.153,528084,37.1182,32.51372,64.54791,
527998.2,1952.15,15319.2,13053.2,103296,2727.71,
19426.3,19891,5852.72,765524,91555,75522.4,77917.1,
75966.2,12504.7,432058,17077.3,6762.77,408218,
29807.03,9776.575,29815.95,117812.8,39.91257,30210.87,
8581.064,31510.18,150584.19,79.67427,8931.97,111034,
3045020,1540380),
`2070` = c(12.9184,135.629,21130.1,
966.578,474.741,9128.98,3804.82,467.633,0,1158.88,
619.112,873.495,594.153,534855,37.50921,32.91809,
65.29468,534772.5,1789.8,18835.5,16026.8,92475.5,2586.44,
18122.6,18551.3,5365.97,729534,86031.8,70978.8,
73232.1,71413.3,11737.3,416140,16482.5,6529.16,393129,
27949.11,9504.536,28818.64,111752.63,37.27523,
29052.37,8551.468,31233.3,146152.92,76.35137,9529.77,
119742,3050650,1578750),
`2075` = c(15.6197,165.125,20862.2,
1013.01,513.803,9113.42,3906.33,474.32,0,1174.1,
630.128,883.612,601.36,540258,37.80618,33.24832,65.84835,
540176.7,1643.9,21033.9,18035.6,84140.7,2424.67,
16903.8,17299.2,4928.55,693826,80758.8,66655.3,
68752.3,67056.4,11015.2,399588,15855.2,6282.74,377450,
26287.84,9123.119,27799.84,105707.98,34.89683,27946.46,
8394.048,30847.08,141235.85,73.15781,9940.28,
128079,3049890,1613310),
`2080` = c(17.0571,182.569,20600.2,1007,
530.424,9268.74,4109.18,479.618,0,1186.73,639.705,
895.505,610.19,545484,38.06203,33.56085,66.35847,
545404.6,1510.17,21798.8,18951.7,78878.5,2253.07,
15749.3,16125.5,4527.62,659039,75652.9,62471.1,
64500.3,62935.7,10320.6,383158,15197.7,6045.7,361915,
24659.71,8741.677,26805.47,99846.06,32.64357,26811.67,
8224.951,30443.86,136278.69,70.02391,9788.65,129905,
3057480,1660520),
`2085` = c(17.6801,191.994,20317.6,
996.431,548.513,9464.88,4347.23,484.908,0,1199.22,
649.722,908.181,619.757,550098,38.25366,33.82106,
66.78983,550021.3,1390,21821.1,19279.7,75179,2071.79,
14682.6,15043.1,4167.36,625667,70856.3,58542.8,60524.8,
59088,9671.64,366983,14543.7,5810.77,346629,
23069.68,8360.614,25813.77,94236.58,30.51336,25651.6,
8042.666,30003.85,131352.25,66.95046,9572.85,131494,
3064560,1711020),
`2090` = c(17.7501,195.664,20009.4,
979.418,563.893,9690.85,4615.35,489.574,0,1210.21,
659.021,920.572,629.272,553944,38.37135,34.01837,
67.12546,553870.1,1283.26,21399.2,19225.8,72395.9,1881.68,
13709.7,14057.5,3847.34,594107,66417.9,54906.9,
56858.4,55541.9,9071.15,351311,13903.2,5582.38,331825,
21534.21,7976.462,24846.54,88955.31,28.50956,
24478.83,7853.662,29557.03,126531.1,63.94133,9289.44,
132155,3070210,1763430),
`2095` = c(17.4626,193.302,19675.3,
956.27,558.153,9907.22,4880.19,492.466,0,1217.35,
663.994,930.164,636.762,557041,38.42535,34.14505,
67.37501,556969.2,1188.85,20744.2,18724.6,70254.1,1685.15,
12828.9,13165.1,3564.27,564528,62372.8,51572.4,
53504.4,52292.7,8510.93,336275,13287.4,5362.83,317625,
20071.46,7592.456,23938.17,84007.81,26.58988,
23317.85,7648.025,29101.12,121860.41,60.93865,8974.24,
129044,3074590,1813100)
)
data_longer %>% unique(sector)
unique(data_longer)
unique(data_longer$sector)
sector_unique<- unique(data_longer$sector)
for (i in sector_unique){
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(~subsector)
}
data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(~subsector)
sector
sector_unique
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(~subsector)
fig
unique(data_longer$sector)
for (i in sector_unique){
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(i~subsector)
}
fig
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(~subsector)
for (i in sector_unique){
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(~subsector)
}
fig
data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
facet_wrap(~subsector)
fig
sector_unique<- unique(data_longer$sector)
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
scale_x_continuous(labels = comma)+
theme_bw()+
theme_minimal()
library(scales)
library(tidyverse)
library(scales)
data_longer<-data %>%
pivot_longer(-c(sector, subsector, technology), names_to="year", values_to ="value") %>%
mutate(value = as.numeric(gsub(",", '', value)),
year = as.numeric(year)) %>%
drop_na()
sector_unique<- unique(data_longer$sector)
for (i in sector_unique){
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
scale_x_continuous(labels = comma)+
theme_bw()+
theme_minimal()
facet_wrap(~subsector)+
labs(title =paste("Sector :", sector_unique, "faceted by subsector"))
plot(fig)
}
data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
scale_x_continuous(labels = comma)+
theme_bw()+
theme_minimal()
facet_wrap(~subsector)
for (i in sector_unique){
fig <- data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
scale_x_continuous(labels = comma)+
theme_bw()+
theme_minimal()
facet_wrap(~subsector)+
labs(title =paste("Sector :", sector_unique, "faceted by subsector"))
data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
theme_bw()+
theme_minimal()
facet_wrap(~subsector)
data_longer %>% filter(sector ==i) %>%
ggplot(aes(x = year, y = value, color  = technology))+
geom_line()+
theme_bw()+
theme_minimal()
facet_wrap(~subsector)
library(scales)
git
git log
library(tidyverse)
library(readxl)
library(lubridate)
library(zoo)
library(showtext)
library(extrafont)
showtext_auto()
font_add_google("Nanum Gothic", "nanumgothic")
price_raw <- read_excel("230821_생활물가지수.xlsx", sheet ="Sheet1")
unique(price_raw$type)
price_tidy<- price_raw %>%
pivot_longer(-type, values_to ="value", names_to = "date") %>%
mutate(date = as.Date(zoo::as.yearmon(date, "%Y.%m")),
color_label = case_when(type =='경유'~ type,
type =="도시가스" ~ type,
TRUE ~ '기타'))
price_tidy
setwd("C:/R/Rproject/Energy&Data/230823_price_files")
setwd("C:/R/Rproject/Energy&Data)
price_raw <- read_excel("230821_생활물가지수.xlsx", sheet ="Sheet1")
unique(price_raw$type)
price_tidy<- price_raw %>%
pivot_longer(-type, values_to ="value", names_to = "date") %>%
mutate(date = as.Date(zoo::as.yearmon(date, "%Y.%m")),
color_label = case_when(type =='경유'~ type,
type =="도시가스" ~ type,
TRUE ~ '기타'))
price_tidy
range(price_tidy$date)
price_tidy_img <- price_tidy %>%
#ggplot(aes(x = date, y = value, group = type, color = color_label))+
ggplot() +
geom_line(data =. %>% filter(!type %in% c(
#"도시가스",
"경유",
"휘발유"
#"전기료"
)),
aes(x = date, y = value, group = type), size = 1.2,  color ="gray")+
geom_line(data =. %>% filter(type =="경유"), aes(x = date, y = value), size = 1.5,  color ="red")+
#geom_line(data =. %>% filter(type =="도시가스"), aes(x = date, y = value), size = 1.5,  color ="blue")+
geom_line(data =. %>% filter(type =="휘발유"), aes(x = date, y = value), size = 1.5,  color ="gold")+
#geom_line(data =. %>% filter(type =="전기료"), aes(x = date, y = value), size = 1.5,  color ="brown")+
scale_x_date(date_breaks = "1 year", date_labels =paste0("'", "%y"))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 24, family="nanumgothic"),
plot.background =element_rect(fill="white"),
panel.grid.minor = element_blank())+
labs(title ="물가지수에서 경유와 도시가스만 표기",
subtitle ="물가지수에서 에너지가 차지하는 정도를 보기 위해 만들었다",
caption = "Source: 통계청, Graphic: Jiseok")
price_tidy_img
ggsave(plot = price_tidy_img, "대전 강수량.png",  width= 630, height = 700, units ="px", dpi = 100)
library(gghighlight)
price_tidy %>%
#ggplot(aes(x = date, y = value, group = type, color = color_label))+
ggplot(aes(x = date, y = value, group = type, color =type)) +
geom_line(linewidth = 1.2)+
gghighlight(type %in% c(
#"도시가스",
#"경유",
#"휘발유",
"전기료"))+
scale_x_date(date_breaks = "1 year", date_labels =paste0("'", "%y"))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 24, family="nanumgothic"),
plot.background =element_rect(fill="white"),
panel.grid.minor = element_blank())+
labs(title ="물가지수에서 경유와 도시가스만 표기",
subtitle ="물가지수에서 에너지가 차지하는 정도를 보기 위해 만들었다",
caption = "Source: 통계청, Graphic: Jiseok")
setwd("C:/R/Rproject/Energy&Data/")
price_raw <- read_excel("230821_생활물가지수.xlsx", sheet ="Sheet1")
unique(price_raw$type)
price_tidy<- price_raw %>%
pivot_longer(-type, values_to ="value", names_to = "date") %>%
mutate(date = as.Date(zoo::as.yearmon(date, "%Y.%m")),
color_label = case_when(type =='경유'~ type,
type =="도시가스" ~ type,
TRUE ~ '기타'))
price_tidy
range(price_tidy$date)
price_tidy_img <- price_tidy %>%
#ggplot(aes(x = date, y = value, group = type, color = color_label))+
ggplot() +
geom_line(data =. %>% filter(!type %in% c(
#"도시가스",
"경유",
"휘발유"
#"전기료"
)),
aes(x = date, y = value, group = type), size = 1.2,  color ="gray")+
geom_line(data =. %>% filter(type =="경유"), aes(x = date, y = value), size = 1.5,  color ="red")+
#geom_line(data =. %>% filter(type =="도시가스"), aes(x = date, y = value), size = 1.5,  color ="blue")+
geom_line(data =. %>% filter(type =="휘발유"), aes(x = date, y = value), size = 1.5,  color ="gold")+
#geom_line(data =. %>% filter(type =="전기료"), aes(x = date, y = value), size = 1.5,  color ="brown")+
scale_x_date(date_breaks = "1 year", date_labels =paste0("'", "%y"))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 24, family="nanumgothic"),
plot.background =element_rect(fill="white"),
panel.grid.minor = element_blank())+
labs(title ="물가지수에서 경유와 도시가스만 표기",
subtitle ="물가지수에서 에너지가 차지하는 정도를 보기 위해 만들었다",
caption = "Source: 통계청, Graphic: Jiseok")
price_tidy_img
price_tidy_img <- price_tidy %>%
#ggplot(aes(x = date, y = value, group = type, color = color_label))+
ggplot() +
geom_line(data =. %>% filter(!type %in% c(
#"도시가스",
"경유",
"휘발유"
#"전기료"
)),
aes(x = date, y = value, group = type), size = 1.2,  color ="gray")+
geom_line(data =. %>% filter(type =="경유"), aes(x = date, y = value), size = 1.5,  color ="red")+
#geom_line(data =. %>% filter(type =="도시가스"), aes(x = date, y = value), size = 1.5,  color ="blue")+
geom_line(data =. %>% filter(type =="휘발유"), aes(x = date, y = value), size = 1.5,  color ="gold")+
#geom_line(data =. %>% filter(type =="전기료"), aes(x = date, y = value), size = 1.5,  color ="brown")+
scale_x_date(date_breaks = "1 year", date_labels =paste0("'", "%y"))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 24, family="nanumgothic"),
plot.background =element_rect(fill="white"),
panel.grid.minor = element_blank())+
labs(title ="통계청 생활물가지수를 활용한 분석",
subtitle ="물가지수에서 경유와 도시가스만 표기",
caption = "Source: 통계청, Graphic: Jiseok")
price_tidy_img
price_tidy_img <- price_tidy %>%
#ggplot(aes(x = date, y = value, group = type, color = color_label))+
ggplot() +
geom_line(data =. %>% filter(!type %in% c(
#"도시가스",
"경유",
"휘발유"
#"전기료"
)),
aes(x = date, y = value, group = type), size = 1.2,  color ="gray")+
geom_line(data =. %>% filter(type =="경유"), aes(x = date, y = value), size = 1.5,  color ="red")+
#geom_line(data =. %>% filter(type =="도시가스"), aes(x = date, y = value), size = 1.5,  color ="blue")+
geom_line(data =. %>% filter(type =="휘발유"), aes(x = date, y = value), size = 1.5,  color ="gold")+
#geom_line(data =. %>% filter(type =="전기료"), aes(x = date, y = value), size = 1.5,  color ="brown")+
scale_x_date(date_breaks = "1 year", date_labels =paste0("'", "%y"))+
theme_bw()+
theme_minimal()+
theme(plot.title = element_text(size = 24, family="nanumgothic"),
plot.background =element_rect(fill="white"),
panel.grid.minor = element_blank())+
labs(title ="통계청 생활물가지수를 활용한 분석",
subtitle ="물가지수에서 경유와 도시가스만 표기",
caption = "Source: 통계청, Graphic: Jiseok")
price_tidy_img
View(data_longer)
install_github('JGCRI/rgcam', build_vignettes=TRUE)
library(devtools)
install_github('JGCRI/rgcam', build_vignettes=TRUE)
1+1
conn <- localDBConn('/path/to/dbs', 'my-gcamdb_basexdb')
library(rgcam
)
library(rgcam)
conn <- localDBConn('/path/to/dbs', 'my-gcamdb_basexdb')
??localDBConn
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output\database_basexdb.0', 'tbl')
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output\database_basexdb.0', 'tbl')
conn <- localDBConn('/database_basexdb.0', 'my-gcamdb_basexdb')
conn <- localDBConn('/database_basexdb.0', 'tbl')
conn <- localDBConn('./database_basexdb.0', 'tbl')
conn <- localDBConn('./database_basexdb.0', 'tbl.basex')
library(rgcam)
conn <- localDBConn('/database_basexdb.0', 'tbl.basex')
??localDBConn
conn <- localDBConn('/E:\gcam-v7.0-Windows-Release-Package\output', 'database_basexdb.0')
conn <- localDBConn('E:\gcam-v7.0-Windows-Release-Package\output', 'database_basexdb.0')
conn <- localDBConn('/', 'database_basexdb.0')
conn <- localDBConn('/.', 'database_basexdb.0')
View(data_selected)
setwd("E:/gcam-v7.0-Windows-Release-Package/output")
setwd("E:/gcam-v7.0-Windows-Release-Package")
conn <- localDBConn('/output', 'database_basexdb.0')
setwd("E:/gcam-v7.0-Windows-Release-Package")
conn <- localDBConn('/output', 'database_basexdb.0')
setwd("E:/gcam-v7.0-Windows-Release-Package")
conn <- localDBConn('/output', 'database_basexdb.0')
conn <- localDBConn('/output', 'database_basexdb.0')
library(rgcam)
setwd("E:/gcam-v7.0-Windows-Release-Package")
conn <- localDBConn('/output', 'database_basexdb.0')
setwd("E:/gcam-v7.0-Windows-Release-Package")
setwd("E:/gcam-v7.0-Windows-Release-Package")
wd
devtools::install_github('JGCRI/plutus')
version
install.packages("gcamextractor")
# Install packages from github -------------------------------------------------
# ..............................................................................
# Uncomment these lines if you need to install the packages
# Hint: Select multiple lines and then (CTRL+SHIFT+C)
# install.packages("remotes") # If required
# install.packages("dplyr") # If required
# library(remotes)
# remotes::install_github("JGCRI/gcamextractor")
# remotes::install_github("JGCRI/rchart")
# remotes::install_github("JGCRI/rmap")
library(gcamextractor)
# ..............................................................................
# Install packages from github -------------------------------------------------
# ..............................................................................
# Uncomment these lines if you need to install the packages
# Hint: Select multiple lines and then (CTRL+SHIFT+C)
install.packages("remotes") # If required
library(remotes)
remotes::install_github("JGCRI/gcamextractor")
1+1
remotes::install_github("JGCRI/rchart")
remotes::install_github("JGCRI/rmap")
# remotes::install_github("JGCRI/gcamextractor")
# remotes::install_github("JGCRI/rchart")
# remotes::install_github("JGCRI/rmap")
library(gcamextractor)
library(rchart)
library(rmap)
library(dplyr)
path_to_gcam_database <- "E:\gcam-v7.0-Windows-Release-Package\output\database_basexdb.0"
path_to_gcam_database <- "E:/gcam-v7.0-Windows-Release-Package/output/database_basexdb.0"
gcamextractor::params # view available parameters
dataGCAM <- gcamextractor::readgcam(gcamdatabase = path_to_gcam_database,
paramsSelect = c("pop","elecByTechTWh"),
folder = "test_folder")
# View your data
df <- dataGCAM$data; df
# View your data
df <- dataGCAM$data; df
# View your data
df <- dataGCAM$data; df
dataGCAM
dfParam <- dataGCAM$dataAggParam; dfParam
dfParam <- dataGCAM$dataAggParam; dfParam
dfClass1 <- dataGCAM$dataAggClass1; dfClass1
# rchart
data_chart <- dfClass1 %>%
dplyr::filter(subRegion %in% c("Argentina", "Colombia"))
charts <- rchart::chart(data_chart)
charts$chart_param_Argentina
unique(dfClass$subRegion)
unique(dfClass1$subRegion)
dplyr::filter(subRegion %in% c("South Korea))
# rchart
data_chart <- dfClass1 %>%
dplyr::filter(subRegion %in% c("South Korea"))
# rchart
data_chart <- dfClass1 %>%
dplyr::filter(subRegion %in% c("South Korea"))
charts <- rchart::chart(data_chart)
charts$chart_param_Argentina
charts$chart_param_Argentina
charts
charts$chart_param
data_chart
data_chart$scenario
unique(data_chart$scenario)
charts <- rchart::chart(data_chart)
# rmap
data_map <-  dfClass1 %>%
dplyr::filter(x %in% c(2100), param %in% c("pop"))
maps <- rmap::map(data_map)
# Get example data (dataAggClass1) from gcamextractor
View(gcamextractor::exampleDataAggClass1)
exampleDataAggClass1
# choose a couple parameters of interest
exampleData <- dplyr::filter(gcamextractor::exampleDataAggClass1,
param %in% c("emissCO2BySectorNoBio",
"elecByTechTWh"))
# ..............................................................................
# Generate a set of charts -----------------------------------------------------
# ..............................................................................
my_charts <- rchart::chart(data = exampleData,
chart_type = "all",
save = F,
folder = "figures")
??chart
git
git setStatusBar()
